#!/bin/bash 
# nonet - runs command with limited/no network access
# Copyright 2012 Solorvox <solorvox@epic.geek.nz>
# Source: https://github.com/solorvox/nonet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# name of the group to deny access
GROUP="nonet"

VERSION="1.2"

# IP address to test that group CANNOT access.  If ping to this
# address is successful, then something is wrong with setup.
# Good example could be your router's external IP (faster) or use
# address of google's DNS 8.8.8.8  Normally this ping should fail
TESTIP="8.8.8.8"

# Default: grabs the default gateway
#TESTIP=$(route -n | grep 'UG[ \t]' | awk '{print $2}')

# command to run iptables to insert blocking rule, block all but localhost
IPTCMD="/usr/sbin/iptables -I OUTPUT -m owner --gid-owner $GROUP ! -d 127.0.0.0/8 -j REJECT --reject-with icmp-net-unreachable"

# Ensure we have a group first
getent group $GROUP > /dev/null 2>&1
RCODE=$?
if [ $RCODE -ne 0 ]; then
	echo "ERROR: Group [$GROUP] was not found!"
	echo "Please add via \"groupadd $GROUP; gpasswd -r $GROUP; gpasswd -M <username> $GROUP\""
	exit -1
fi

# safety check to ensure firewall is blocking before running command
sg $GROUP "ping -c 1 $TESTIP > /dev/null 2>&1"
RCODE=$?
if [ $RCODE -eq 0 ]; then
	echo "ERROR: Network access to [$TESTIP] detected!"
	echo ""
	echo "Ensure you have setup your firewall.  This can be done via a script"
	echo "located in /etc/NetworkManager/dispatcher.d/pre-up.d/$GROUP running this command:"
	echo $IPTCMD
	echo
	echo "You may add this rule now but it will not persist"
	echo "after a reboot. (Timeouts in 15 seconds with 'no')"
	echo -n "Run iptables command with sudo now? [y/N]? "
	read -t 15 ans
	echo
	if [ "$ans" == "y" -o "$ans" == "Y" ]; then
		sudo $IPTCMD 
		if [ $? -ne 0 ]; then
			echo "Error: sudo or iptables rule failed.";
			exit -1
		fi
	else
		echo "Aborted running without valid iptables rule."
		exit -1
	fi
fi

if [[ -z "${1}" ]]; then
	echo "nonet - Network isolation script.  Version: $VERSION"
	echo
	echo "Usage: $(basename $0) <command>"
	echo "Notes:  This script checks for network conectivity on each run."
	echo "If it can ping your default route (or TESTIP), it then asks if "
	echo "you wish to add an iptables rule to block access to ($GROUP)."
	echo
	echo "TIP: Steam users can prefix games by changing the \"Launch Options\""
	echo "nonet %command%"
	exit 0;
fi

# Because steam overlay uses injection based method and 'sg' will
# not pass LD_* vars, need to use this somewhat ugly workaround
# to keep the overlay working while still blocking network access.
SCRIPT="$(mktemp)"
echo -n "#!" > $SCRIPT
echo $(which sh) >> $SCRIPT
echo "cd \"$PWD\"" >> $SCRIPT

# List of env vars to pass to child process
EXPORT_VARS="LD_LIBRARY_PATH LD_PRELOAD" 
for var in $EXPORT_VARS; do
	echo "export $var=${!var}" >> $SCRIPT
done

# deal with spaces in the path/command from steam arguments
printf -v CMD '%q ' "$@"
echo $CMD >> $SCRIPT

chmod +x $SCRIPT
sg "$GROUP" -c $SCRIPT
wait
# cleanup
rm $SCRIPT
